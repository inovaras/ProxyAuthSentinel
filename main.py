import asyncio
import os
import json
import random
from pathlib import Path
import shutil
from asyncio import Semaphore
from typing import Dict, Any

import zipfile
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
from tqdm import tqdm
from jsonschema import validate, ValidationError

from configs import *

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
semaphore = Semaphore(MAX_CONCURRENT)


def get_proxy(proxy_str: str) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–∫—Å–∏-—Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telethon"""
    try:
        host, port, user, password = proxy_str.split(':')
        return {
            'proxy_type': 'socks5',
            'addr': host,
            'port': int(port),
            'username': user,
            'password': password,
            'rdns': True
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏: {str(e)}")
        raise


async def check_spamblock(client: TelegramClient) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        if not await client.is_user_authorized():
            return {"status": "–Ω–µ_–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}

        spam_bot = await client.get_entity('SpamBot')
        response = await client.send_message(spam_bot, '/start')

        block_keywords = [
            "–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø",
            "–∞–∫–∫–∞—É–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω",
            "spam ban",
            "restricted",
            "spam detected",
            "account limited",
            "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
        ]

        is_blocked = any(k in response.text.lower() for k in block_keywords)
        return {
            "status": "—Å–ø–∞–º_–±–ª–æ–∫" if is_blocked else "–æ–∫",
            "response_text": response.text
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}")
        return {"status": "–æ—à–∏–±–∫–∞", "details": str(e)}


async def try_reconnect(account_data: dict, json_file: str) -> Dict[str, Any]:
    """–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –±–µ–∑ –∫–æ–¥–∞"""
    client = None
    try:
        for attempt in range(1, MAX_RECONNECT_ATTEMPTS + 1):
            try:
                proxy_info = account_data.get("proxy")
                proxy = None
                if proxy_info and len(proxy_info) >= 6:
                    proxy = {
                        "proxy_type": "socks5",
                        "addr": proxy_info[1],
                        "port": int(proxy_info[2]),
                        "username": proxy_info[4],
                        "password": proxy_info[5],
                        "rdns": True
                    }

                client = TelegramClient(
                    StringSession(),
                    account_data["app_id"],
                    account_data["app_hash"],
                    proxy=proxy,
                    device_model=account_data["device"],
                    app_version=account_data["app_version"]
                )
                await client.connect()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ SpamBot
                check_result = await check_spamblock(client)
                if check_result["status"] == "–æ–∫":
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                    account_data["session_file"] = client.session.save()
                    with open(json_file, "w", encoding="utf-8") as f:
                        json.dump(account_data, f, ensure_ascii=False, indent=2)
                    return {"status": "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "details": check_result}

                await asyncio.sleep(DELAY_BETWEEN_ATTEMPTS)
            finally:
                if client:
                    await client.disconnect()
        return {"status": "–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∞—è_–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", "details": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return {"status": "–æ—à–∏–±–∫–∞", "details": str(e)}


async def process_account(account_data: dict, json_file: str) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è phone_code"""
    client = None
    try:
        proxy_info = account_data.get("proxy")
        proxy = None
        if proxy_info and len(proxy_info) >= 6:
            proxy = {
                "proxy_type": "socks5",
                "addr": proxy_info[1],
                "port": int(proxy_info[2]),
                "username": proxy_info[4],
                "password": proxy_info[5],
                "rdns": True
            }

        client = TelegramClient(
            StringSession(account_data["session_file"]),
            account_data["app_id"],
            account_data["app_hash"],
            proxy=proxy,
            device_model=account_data["device"],
            app_version=account_data["app_version"]
        )

        await client.connect()

        if not await client.is_user_authorized():
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SpamBot
            logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {account_data['phone']} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ SpamBot...")
            return await try_reconnect(account_data, json_file)

        return await check_spamblock(client)

    except SessionPasswordNeededError:
        # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω 2FA, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if account_data.get("twoFA"):
            try:
                await client.sign_in(password=account_data["twoFA"])
                return await check_spamblock(client)
            except Exception as e:
                return {"status": "–æ—à–∏–±–∫–∞_2fa", "details": str(e)}
        else:
            return {"status": "—Ç—Ä–µ–±—É–µ—Ç—Å—è_2fa"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return {"status": "–æ—à–∏–±–∫–∞", "details": str(e)}
    finally:
        if client:
            await client.disconnect()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üîí –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP/RAR –∞—Ä—Ö–∏–≤ —Å JSON —Ñ–∞–π–ª–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    )


@dp.message(lambda message: message.document)
async def handle_archive(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—Ä—Ö–∏–≤–æ–≤"""
    Path("temp").mkdir(exist_ok=True)
    Path("accounts").mkdir(exist_ok=True)
    file_path = None

    try:
        if message.document.file_size > MAX_FILE_SIZE:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 100 –ú–ë")
            return

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file = await message.bot.get_file(message.document.file_id)
        file_path = f"temp/{message.document.file_name}"
        await message.bot.download_file(file.file_path, file_path)

        # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
        extract_dir = 'accounts'
        if message.document.file_name.endswith('.zip'):
            with zipfile.ZipFile(file_path, 'r') as archive:
                archive.extractall(extract_dir)
        elif message.document.file_name.endswith('.rar'):
            with rarfile.RarFile(file_path) as archive:
                archive.extractall(extract_dir)
        else:
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ ZIP/RAR –∞—Ä—Ö–∏–≤—ã")
            return

        # –ü–æ–∏—Å–∫ JSON —Ñ–∞–π–ª–æ–≤
        json_files = []
        for root, _, files in os.walk(extract_dir):
            json_files.extend(
                [os.path.join(root, f) for f in files if f.endswith('.json')]
            )

        if not json_files:
            await message.answer("üìÇ –ê—Ä—Ö–∏–≤ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON —Ñ–∞–π–ª–æ–≤")
            return

        results = {
            "–≤—Å–µ–≥–æ": 0,
            "–∞–∫—Ç–∏–≤–Ω—ã": 0,
            "—Å–ø–∞–º_–±–ª–æ–∫": 0,
            "–æ—à–∏–±–∫–∏": 0,
            "—Ç—Ä–µ–±—É–µ—Ç—Å—è_2fa": 0,
            "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ": 0,
            "–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–µ_–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏": 0
        }

        for json_file in tqdm(json_files, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"):
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    account = json.load(f)
                    validate(account, ACCOUNT_SCHEMA)

                    async with semaphore:
                        result = await process_account(account, json_file)
                        results["–≤—Å–µ–≥–æ"] += 1

                        if result['status'] == '–æ–∫':
                            results["–∞–∫—Ç–∏–≤–Ω—ã"] += 1
                        elif result['status'] == '—Å–ø–∞–º_–±–ª–æ–∫':
                            results["—Å–ø–∞–º_–±–ª–æ–∫"] += 1
                        elif result['status'] == '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω':
                            results["–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"] += 1
                        elif result['status'] == '–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∞—è_–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞':
                            results["–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–µ_–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"] += 1
                        elif result['status'] == '—Ç—Ä–µ–±—É–µ—Ç—Å—è_2fa':
                            results["—Ç—Ä–µ–±—É–µ—Ç—Å—è_2fa"] += 1
                        else:
                            results["–æ—à–∏–±–∫–∏"] += 1

            except (json.JSONDecodeError, ValidationError) as e:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π JSON: {json_file} - {str(e)}")
                results["–æ—à–∏–±–∫–∏"] += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
                results["–æ—à–∏–±–∫–∏"] += 1

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = (
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {results['–≤—Å–µ–≥–æ']}\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã: {results['–∞–∫—Ç–∏–≤–Ω—ã']}\n"
            f"üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {results['—Å–ø–∞–º_–±–ª–æ–∫']}\n"
            f"‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {results['–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ']}\n"
            f"‚õî –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {results['–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–µ_–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏']}\n"
            f"üîë –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA: {results['—Ç—Ä–µ–±—É–µ—Ç—Å—è_2fa']}\n"
            f"‚ö†Ô∏è –û—à–∏–±–∫–∏: {results['–æ—à–∏–±–∫–∏']}"
        )

        await message.answer(report)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞")
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        try:
            if file_path and os.path.exists(file_path):
                os.remove(file_path)
            if os.path.exists(extract_dir):
                shutil.rmtree(extract_dir)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        if not os.path.exists(rarfile.UNRAR_TOOL):
            raise RuntimeError(
                f"UnRAR –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {rarfile.UNRAR_TOOL}\n"
                "–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
            )

        asyncio.run(main())
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        exit(1)
